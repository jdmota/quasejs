// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graph bundle 1`] = `
Object {
  "files": Array [
    Object {
      "dest": "dest/entry.js",
      "id": "context/entry.js",
      "isEntry": true,
      "normalized": "entry.js",
      "path": "context/entry.js",
      "relativeDest": "entry.js",
      "srcs": Array [
        "context/entry.js",
        "context/A.js",
        "context/B.js",
        "context/C.js",
      ],
    },
  ],
  "moduleToAssets": Map {
    "f7b05" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
          "context/A.js",
          "context/B.js",
          "context/C.js",
        ],
      },
    ],
    "28431" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
          "context/A.js",
          "context/B.js",
          "context/C.js",
        ],
      },
    ],
    "64a10" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
          "context/A.js",
          "context/B.js",
          "context/C.js",
        ],
      },
    ],
    "f9430" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
          "context/A.js",
          "context/B.js",
          "context/C.js",
        ],
      },
    ],
  },
  "runtime": "\\"use strict\\";(function (global, nodeRequire) {
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank();
  var fileImports = blank();
  var fetches = blank();
  var publicPath = isNode ? \\"./\\" : \\"/\\";
  var helpers = undefined;
  var files = [\\"entry.js\\"].map(function (p) {
    return publicPath + p;
  });
  var moduleToFiles = {
    \\"28431\\": [0],
    \\"f7b05\\": [0],
    \\"64a10\\": [0],
    \\"f9430\\": [0]
  };

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function push(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get: get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function get() {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports;
      fn(moduleExports, requireSync, requireAsync, helpers, exportHelper, exportAllHelper);
      return moduleExports;
    }

    throw new Error(\\"Module \\".concat(id, \\" not found\\"));
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(idx) {
    var id = files[idx];

    if (fileImports[id] === UNDEFINED) {
      fileImports[id] = require(id);
    }

    return fileImports[id];
  }

  function importFileAsync(idx) {
    var src = files[idx];

    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (!isBrowser) {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
      return promise;
    }

    var script = doc.createElement(\\"script\\");
    script.type = \\"text/javascript\\";
    script.charset = \\"utf-8\\";
    script.async = true;
    script.timeout = 120000;
    script.src = src;
    var timeout = setTimeout(onError, 120000);

    function done(err) {
      clearTimeout(timeout);
      script.onerror = script.onload = UNDEFINED;
      resolution[err ? 1 : 0](err || NULL);
    }

    function onError() {
      done(new Error(\\"Fetching \\".concat(src, \\" failed\\")));
    }

    script.onload = function () {
      done();
    };

    script.onerror = onError;
    doc.head.appendChild(script);
    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push: push
      };
    }

    return;
  }

  global.__quase_builder__ = {
    r: requireSync,
    i: requireAsync,
    q: {
      push: push
    }
  };
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require);",
}
`;

exports[`graph cycle 1`] = `
Object {
  "files": Array [
    Object {
      "dest": "dest/entry.js",
      "id": "context/entry.js",
      "isEntry": true,
      "normalized": "entry.js",
      "path": "context/entry.js",
      "relativeDest": "entry.js",
      "srcs": Array [
        "context/entry.js",
        "context/A.js",
        "context/B.js",
      ],
    },
  ],
  "moduleToAssets": Map {
    "f7b05" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
          "context/A.js",
          "context/B.js",
        ],
      },
    ],
    "28431" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
          "context/A.js",
          "context/B.js",
        ],
      },
    ],
    "64a10" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
          "context/A.js",
          "context/B.js",
        ],
      },
    ],
  },
  "runtime": "\\"use strict\\";(function (global, nodeRequire) {
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank();
  var fileImports = blank();
  var fetches = blank();
  var publicPath = isNode ? \\"./\\" : \\"/\\";
  var helpers = undefined;
  var files = [\\"entry.js\\"].map(function (p) {
    return publicPath + p;
  });
  var moduleToFiles = {
    \\"28431\\": [0],
    \\"f7b05\\": [0],
    \\"64a10\\": [0]
  };

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function push(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get: get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function get() {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports;
      fn(moduleExports, requireSync, requireAsync, helpers, exportHelper, exportAllHelper);
      return moduleExports;
    }

    throw new Error(\\"Module \\".concat(id, \\" not found\\"));
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(idx) {
    var id = files[idx];

    if (fileImports[id] === UNDEFINED) {
      fileImports[id] = require(id);
    }

    return fileImports[id];
  }

  function importFileAsync(idx) {
    var src = files[idx];

    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (!isBrowser) {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
      return promise;
    }

    var script = doc.createElement(\\"script\\");
    script.type = \\"text/javascript\\";
    script.charset = \\"utf-8\\";
    script.async = true;
    script.timeout = 120000;
    script.src = src;
    var timeout = setTimeout(onError, 120000);

    function done(err) {
      clearTimeout(timeout);
      script.onerror = script.onload = UNDEFINED;
      resolution[err ? 1 : 0](err || NULL);
    }

    function onError() {
      done(new Error(\\"Fetching \\".concat(src, \\" failed\\")));
    }

    script.onload = function () {
      done();
    };

    script.onerror = onError;
    doc.head.appendChild(script);
    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push: push
      };
    }

    return;
  }

  global.__quase_builder__ = {
    r: requireSync,
    i: requireAsync,
    q: {
      push: push
    }
  };
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require);",
}
`;

exports[`graph cycle split 1`] = `
Object {
  "files": Array [
    Object {
      "dest": "dest/A.js",
      "id": "context/A.js",
      "isEntry": false,
      "normalized": "A.js",
      "path": "context/A.js",
      "relativeDest": "A.js",
      "srcs": Array [
        "context/A.js",
      ],
    },
    Object {
      "dest": "dest/B.js",
      "id": "context/B.js",
      "isEntry": false,
      "normalized": "B.js",
      "path": "context/B.js",
      "relativeDest": "B.js",
      "srcs": Array [
        "context/B.js",
      ],
    },
    Object {
      "dest": "dest/entry.js",
      "id": "context/entry.js",
      "isEntry": true,
      "normalized": "entry.js",
      "path": "context/entry.js",
      "relativeDest": "entry.js",
      "srcs": Array [
        "context/entry.js",
      ],
    },
  ],
  "moduleToAssets": Map {
    "f7b05" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": true,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
        ],
      },
      Object {
        "dest": "dest/A.js",
        "id": "context/A.js",
        "isEntry": false,
        "normalized": "A.js",
        "path": "context/A.js",
        "relativeDest": "A.js",
        "srcs": Array [
          "context/A.js",
        ],
      },
      Object {
        "dest": "dest/B.js",
        "id": "context/B.js",
        "isEntry": false,
        "normalized": "B.js",
        "path": "context/B.js",
        "relativeDest": "B.js",
        "srcs": Array [
          "context/B.js",
        ],
      },
    ],
    "28431" => Array [
      Object {
        "dest": "dest/A.js",
        "id": "context/A.js",
        "isEntry": false,
        "normalized": "A.js",
        "path": "context/A.js",
        "relativeDest": "A.js",
        "srcs": Array [
          "context/A.js",
        ],
      },
      Object {
        "dest": "dest/B.js",
        "id": "context/B.js",
        "isEntry": false,
        "normalized": "B.js",
        "path": "context/B.js",
        "relativeDest": "B.js",
        "srcs": Array [
          "context/B.js",
        ],
      },
    ],
    "64a10" => Array [
      Object {
        "dest": "dest/B.js",
        "id": "context/B.js",
        "isEntry": false,
        "normalized": "B.js",
        "path": "context/B.js",
        "relativeDest": "B.js",
        "srcs": Array [
          "context/B.js",
        ],
      },
      Object {
        "dest": "dest/A.js",
        "id": "context/A.js",
        "isEntry": false,
        "normalized": "A.js",
        "path": "context/A.js",
        "relativeDest": "A.js",
        "srcs": Array [
          "context/A.js",
        ],
      },
    ],
  },
  "runtime": "\\"use strict\\";(function (global, nodeRequire) {
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank();
  var fileImports = blank();
  var fetches = blank();
  var publicPath = isNode ? \\"./\\" : \\"/\\";
  var helpers = undefined;
  var files = [\\"A.js\\", \\"B.js\\", \\"entry.js\\"].map(function (p) {
    return publicPath + p;
  });
  var moduleToFiles = {
    \\"28431\\": [0, 1],
    \\"f7b05\\": [2, 0, 1],
    \\"64a10\\": [1, 0]
  };

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function push(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get: get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function get() {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports;
      fn(moduleExports, requireSync, requireAsync, helpers, exportHelper, exportAllHelper);
      return moduleExports;
    }

    throw new Error(\\"Module \\".concat(id, \\" not found\\"));
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(idx) {
    var id = files[idx];

    if (fileImports[id] === UNDEFINED) {
      fileImports[id] = require(id);
    }

    return fileImports[id];
  }

  function importFileAsync(idx) {
    var src = files[idx];

    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (!isBrowser) {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
      return promise;
    }

    var script = doc.createElement(\\"script\\");
    script.type = \\"text/javascript\\";
    script.charset = \\"utf-8\\";
    script.async = true;
    script.timeout = 120000;
    script.src = src;
    var timeout = setTimeout(onError, 120000);

    function done(err) {
      clearTimeout(timeout);
      script.onerror = script.onload = UNDEFINED;
      resolution[err ? 1 : 0](err || NULL);
    }

    function onError() {
      done(new Error(\\"Fetching \\".concat(src, \\" failed\\")));
    }

    script.onload = function () {
      done();
    };

    script.onerror = onError;
    doc.head.appendChild(script);
    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push: push
      };
    }

    return;
  }

  global.__quase_builder__ = {
    r: requireSync,
    i: requireAsync,
    q: {
      push: push
    }
  };
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require);",
}
`;

exports[`graph split points 1`] = `
Object {
  "files": Array [
    Object {
      "dest": "dest/entry.js",
      "id": "context/entry.js",
      "isEntry": false,
      "normalized": "entry.js",
      "path": "context/entry.js",
      "relativeDest": "entry.js",
      "srcs": Array [
        "context/entry.js",
      ],
    },
    Object {
      "dest": "dest/A.js",
      "id": "context/A.js",
      "isEntry": false,
      "normalized": "A.js",
      "path": "context/A.js",
      "relativeDest": "A.js",
      "srcs": Array [
        "context/A.js",
      ],
    },
    Object {
      "dest": "dest/B.js",
      "id": "context/B.js",
      "isEntry": false,
      "normalized": "B.js",
      "path": "context/B.js",
      "relativeDest": "B.js",
      "srcs": Array [
        "context/B.js",
      ],
    },
    Object {
      "dest": "dest/entry.html",
      "id": "context/entry.html",
      "isEntry": true,
      "normalized": "entry.html",
      "path": "context/entry.html",
      "relativeDest": "entry.html",
      "srcs": Array [
        "context/entry.html",
      ],
    },
  ],
  "moduleToAssets": Map {
    "a850a" => Array [
      Object {
        "dest": "dest/entry.html",
        "id": "context/entry.html",
        "isEntry": true,
        "normalized": "entry.html",
        "path": "context/entry.html",
        "relativeDest": "entry.html",
        "srcs": Array [
          "context/entry.html",
        ],
      },
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": false,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
        ],
      },
      Object {
        "dest": "dest/A.js",
        "id": "context/A.js",
        "isEntry": false,
        "normalized": "A.js",
        "path": "context/A.js",
        "relativeDest": "A.js",
        "srcs": Array [
          "context/A.js",
        ],
      },
      Object {
        "dest": "dest/B.js",
        "id": "context/B.js",
        "isEntry": false,
        "normalized": "B.js",
        "path": "context/B.js",
        "relativeDest": "B.js",
        "srcs": Array [
          "context/B.js",
        ],
      },
    ],
    "f7b05" => Array [
      Object {
        "dest": "dest/entry.js",
        "id": "context/entry.js",
        "isEntry": false,
        "normalized": "entry.js",
        "path": "context/entry.js",
        "relativeDest": "entry.js",
        "srcs": Array [
          "context/entry.js",
        ],
      },
      Object {
        "dest": "dest/A.js",
        "id": "context/A.js",
        "isEntry": false,
        "normalized": "A.js",
        "path": "context/A.js",
        "relativeDest": "A.js",
        "srcs": Array [
          "context/A.js",
        ],
      },
      Object {
        "dest": "dest/B.js",
        "id": "context/B.js",
        "isEntry": false,
        "normalized": "B.js",
        "path": "context/B.js",
        "relativeDest": "B.js",
        "srcs": Array [
          "context/B.js",
        ],
      },
    ],
    "28431" => Array [
      Object {
        "dest": "dest/A.js",
        "id": "context/A.js",
        "isEntry": false,
        "normalized": "A.js",
        "path": "context/A.js",
        "relativeDest": "A.js",
        "srcs": Array [
          "context/A.js",
        ],
      },
      Object {
        "dest": "dest/B.js",
        "id": "context/B.js",
        "isEntry": false,
        "normalized": "B.js",
        "path": "context/B.js",
        "relativeDest": "B.js",
        "srcs": Array [
          "context/B.js",
        ],
      },
    ],
    "64a10" => Array [
      Object {
        "dest": "dest/B.js",
        "id": "context/B.js",
        "isEntry": false,
        "normalized": "B.js",
        "path": "context/B.js",
        "relativeDest": "B.js",
        "srcs": Array [
          "context/B.js",
        ],
      },
      Object {
        "dest": "dest/A.js",
        "id": "context/A.js",
        "isEntry": false,
        "normalized": "A.js",
        "path": "context/A.js",
        "relativeDest": "A.js",
        "srcs": Array [
          "context/A.js",
        ],
      },
    ],
  },
  "runtime": "\\"use strict\\";(function (global, nodeRequire) {
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank();
  var fileImports = blank();
  var fetches = blank();
  var publicPath = isNode ? \\"./\\" : \\"/\\";
  var helpers = undefined;
  var files = [\\"entry.js\\", \\"A.js\\", \\"B.js\\", \\"entry.html\\"].map(function (p) {
    return publicPath + p;
  });
  var moduleToFiles = {
    \\"28431\\": [1, 2],
    \\"a850a\\": [3, 0, 1, 2],
    \\"f7b05\\": [0, 1, 2],
    \\"64a10\\": [2, 1]
  };

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function push(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get: get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function get() {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports;
      fn(moduleExports, requireSync, requireAsync, helpers, exportHelper, exportAllHelper);
      return moduleExports;
    }

    throw new Error(\\"Module \\".concat(id, \\" not found\\"));
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(idx) {
    var id = files[idx];

    if (fileImports[id] === UNDEFINED) {
      fileImports[id] = require(id);
    }

    return fileImports[id];
  }

  function importFileAsync(idx) {
    var src = files[idx];

    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (!isBrowser) {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
      return promise;
    }

    var script = doc.createElement(\\"script\\");
    script.type = \\"text/javascript\\";
    script.charset = \\"utf-8\\";
    script.async = true;
    script.timeout = 120000;
    script.src = src;
    var timeout = setTimeout(onError, 120000);

    function done(err) {
      clearTimeout(timeout);
      script.onerror = script.onload = UNDEFINED;
      resolution[err ? 1 : 0](err || NULL);
    }

    function onError() {
      done(new Error(\\"Fetching \\".concat(src, \\" failed\\")));
    }

    script.onload = function () {
      done();
    };

    script.onerror = onError;
    doc.head.appendChild(script);
    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push: push
      };
    }

    return;
  }

  global.__quase_builder__ = {
    r: requireSync,
    i: requireAsync,
    q: {
      push: push
    }
  };
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require);",
}
`;
