// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`watcher Fixture: watch-fixtures/basic 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){$r(\\"a.js\\");
},
\\"a.js\\":function($e){$e.default = 10;
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/a.js\\"],\\"names\\":[],\\"mappings\\":\\";2BAAO;;iCCAQ,E\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import \\\\\\"./a\\\\\\";\\\\n\\",\\"export default 10;\\\\n\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/basic 2`] = `
"
--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.17 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
package.json
working/a
working/a.js
working/index.js
working/package.json
../package.json
"
`;

exports[`watcher Fixture: watch-fixtures/custom-code-frame 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){var _a = $r(\\"a.js\\");

console.log(_a.default);
console.log(_a.default);
console.log(_a.default);
console.log(_a.default);
},
\\"a.js\\":function($e){$e.default = 10;
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/a.js\\"],\\"names\\":[\\"console\\",\\"log\\"],\\"mappings\\":\\";2BAAc;;AAEdA,OAAO,CAACC,GAAR,CAFO,UAEP;AAEAD,OAAO,CAACC,GAAR,CAJO,UAIP;AAEAD,OAAO,CAACC,GAAR,CANO,UAMP;AAEAD,OAAO,CAACC,GAAR,CARO,UAQP;;iCCRe,E\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import a from \\\\\\"./a\\\\\\";\\\\n\\\\nconsole.log( a );\\\\n\\\\nconsole.log( a );\\\\n\\\\nconsole.log( a );\\\\n\\\\nconsole.log( a );\\\\n\\",\\"export default 10;\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/custom-code-frame 2`] = `
"
--------

Starting new build...

--------

Could not resolve ./a. See index.js:1:14

> 1 | import a from \\"./a\\";
  2 | 
  3 | console.log( a );
  4 | 
  5 | console.log( a );
  6 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json
../package.json

--------

File working/a.js was added.

--------

Starting new build...

--------

./a exports nothing. Looking for default. See index.js:1:7

> 1 | import a from \\"./a\\";
  2 | 
  3 | console.log( a );
  4 | 
  5 | console.log( a );
  6 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json
../package.json

--------

File working/a.js was changed.

--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.28 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json
../package.json

--------

File working/a.js was removed.

--------

Starting new build...

--------

Could not resolve ./a. See index.js:1:14

> 1 | import a from \\"./a\\";
  2 | 
  3 | console.log( a );
  4 | 
  5 | console.log( a );
  6 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json
../package.json
"
`;

exports[`watcher Fixture: watch-fixtures/performance-hints 1`] = `
Object {
  "atual/index.html": "<!DOCTYPE ><html><head></head><body>
    <script>(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require);</script><script>\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({},{\\"f\\":[\\"index.js\\"],\\"m\\":{\\"index.js\\":[0]}})</script><script type=\\"text/javascript\\" src=\\"index.js\\" defer=\\"\\"></script><script defer=\\"\\" src=\\"data:text/javascript,__quase_builder__.r('index.js');\\"></script>
  

</body></html>",
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){$r(\\"a.js\\");
},
\\"a.js\\":function($e){$e.default = 10;
}});
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/a.js\\"],\\"names\\":[],\\"mappings\\":\\";2BAAO;;iCCAQ,E\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import \\\\\\"./a\\\\\\";\\\\n\\",\\"export default 10;\\\\n\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/performance-hints 2`] = `
"
--------

Starting new build...

--------

Assets:

atual/index.js | 266 B > 100 B [performance!]
[entry] atual/index.html | 5.34 kB > 10 B [performance!]

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/index.html
working/index.js
working/package.json
"
`;

exports[`watcher Fixture: watch-fixtures/resolve-recovery 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){var _x = $r(\\"x/index.js\\");
},
\\"x/index.js\\":function($e){$e.default = 'good';
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/x/index.js\\"],\\"names\\":[],\\"mappings\\":\\";2BAAc;;uCCAC,M\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import x from \\\\\\"./x\\\\\\";\\\\n\\",\\"export default 'good';\\\\n\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/resolve-recovery 2`] = `
"
--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.18 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/index.js
working/package.json
working/x
working/x.js

--------

File working/x.js was removed.

--------

Starting new build...

--------

Could not resolve ./x. See index.js:1:14

> 1 | import x from \\"./x\\";
  2 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/index.js
working/package.json
working/x
working/x.js
working/x/index
working/x/index.js
working/x/package.json

--------

File working/x/index.js was changed.

--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.2 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/index.js
working/package.json
working/x
working/x.js
working/x/index
working/x/index.js
working/x/package.json
"
`;

exports[`watcher Fixture: watch-fixtures/script-inline-in-html 1`] = `
Object {
  "atual/index.html": "<!DOCTYPE html><html><head></head>
  <body>
    <script>(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require);</script><script defer=\\"\\">\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.html|(0,js)\\":function($e,$r){var _a = $r(\\"a.js\\");
},
\\"a.js\\":function($e,$r,$i,$g){$g($e, \\"a\\", function () {
  return a;
});
const a = 10;
}});
__quase_builder__.r('index.html|(0,js)');</script>
    <script></script>
  

</body></html>",
}
`;

exports[`watcher Fixture: watch-fixtures/script-inline-in-html 2`] = `
"
--------

Starting new build...

--------

Could not resolve ./a.js. See index.html|(0,js):2:24

  1 | 
> 2 |       import { a } from \\"./a.js\\";
  3 |     

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a.js
working/a.js.js
working/a.js/index
working/a.js/index.js
working/a.js/package.json
working/index.html
working/package.json

--------

File working/a.js was added.

--------

Starting new build...

--------

./a.js exports nothing. Looking for a. See index.html|(0,js):2:15

  1 | 
> 2 |       import { a } from \\"./a.js\\";
  3 |     

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a.js
working/a.js.js
working/a.js/index
working/a.js/index.js
working/a.js/package.json
working/index.html
working/package.json

--------

File working/a.js was changed.

--------

Starting new build...

--------

Assets:

[entry] atual/index.html | 5.38 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a.js
working/a.js.js
working/a.js/index
working/a.js/index.js
working/a.js/package.json
working/index.html
working/package.json
"
`;

exports[`watcher Fixture: watch-fixtures/watches-missing-entry 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function(){
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[],\\"names\\":[],\\"mappings\\":\\"\\",\\"file\\":\\"index.js\\"}",
}
`;

exports[`watcher Fixture: watch-fixtures/watches-missing-entry 2`] = `
"
--------

Starting new build...

--------

Could not find index.js

Build failed.

--------

Watching:

working/index.js

--------

File working/index.js was added.

--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.12 kB

Done building.

--------

Watching:

working/index.js
"
`;

exports[`watcher Fixture: watch-fixtures/watches-missing-file 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){var _a = $r(\\"a.js\\");
},
\\"a.js\\":function($e){$e.default = 10;
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/a.js\\"],\\"names\\":[],\\"mappings\\":\\";2BAAc;;iCCAC,E\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import a from \\\\\\"./a\\\\\\";\\\\n\\",\\"export default 10;\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/watches-missing-file 2`] = `
"
--------

Starting new build...

--------

Could not resolve ./a. See index.js:1:14

> 1 | import a from \\"./a\\";
  2 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json

--------

File working/a.js was added.

--------

Starting new build...

--------

./a exports nothing. Looking for default. See index.js:1:7

> 1 | import a from \\"./a\\";
  2 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json

--------

File working/a.js was changed.

--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.18 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json

--------

File working/a.js was removed.

--------

Starting new build...

--------

Could not resolve ./a. See index.js:1:14

> 1 | import a from \\"./a\\";
  2 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json
"
`;

exports[`watcher Fixture: watch-fixtures/watches-modules-in-cache 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){var _a = $r(\\"a.js\\");
},
\\"a.js\\":function($e){$e.default = 30;
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/a.js\\"],\\"names\\":[],\\"mappings\\":\\";2BAAc;;iCCAC,E\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import a from './a';\\",\\"export default 30;\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/watches-modules-in-cache 2`] = `
"
--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.18 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/index.js
working/package.json

--------

File working/index.js was changed.

--------

Starting new build...

--------

Could not resolve ./stuff. See index.js:1:18

> 1 | import stuff from './stuff';

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/index.js
working/package.json
working/stuff
working/stuff.js
working/stuff/index
working/stuff/index.js
working/stuff/package.json

--------

File working/a.js was changed.

--------

Starting new build...

--------

Could not resolve ./stuff. See index.js:1:18

> 1 | import stuff from './stuff';

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/index.js
working/package.json
working/stuff
working/stuff.js
working/stuff/index
working/stuff/index.js
working/stuff/package.json

--------

File working/index.js was changed.

--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.18 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/index.js
working/package.json
working/stuff
working/stuff.js
working/stuff/index
working/stuff/index.js
working/stuff/package.json
"
`;

exports[`watcher Fixture: watch-fixtures/watches-other-extensions 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){$r(\\"a.js\\");
},
\\"a.js\\":function($e){$e.default = 40;
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/a.js\\"],\\"names\\":[],\\"mappings\\":\\";2BAAO;;iCCAQ,E\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import \\\\\\"./a\\\\\\";\\\\n\\",\\"export default 40;\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/watches-other-extensions 2`] = `
"
--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.18 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a.ts
working/index.js
working/package.json

--------

File working/a.js was added.

--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.17 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a.ts
working/index.js
working/package.json
"
`;

exports[`watcher Fixture: watch-fixtures/watches-rename 1`] = `
Object {
  "atual/index.js": "\\"use strict\\";({g:\\"undefined\\"==typeof self?Function(\\"return this\\")():self,p(m,f){(this.g.__quase_builder__=this.g.__quase_builder__||{q:[]}).q.push([m,f])}}).p({
\\"index.js\\":function($e,$r){var _b = $r(\\"b.js\\");
},
\\"b.js\\":function($e){$e.default = 10;
}});(function (global, nodeRequire) {
  // Help reduce minified size
  var UNDEFINED = undefined;
  var NULL = null;
  var Promise = global.Promise;
  var importScripts = global.importScripts;
  var doc = global.document;
  var isNode = !!nodeRequire;
  var isWorker = !!importScripts;
  var isBrowser = global.window === global;

  function blank() {
    return Object.create(NULL);
  }

  var modules = blank();
  var fnModules = blank(); // Functions that load the module

  var fileImports = blank(); // Files that were imported already

  var fetches = blank(); // Fetches

  var publicPath = isNode ? \\"./\\" : \\"\\";
  var moduleToFiles = blank();

  function require(id) {
    if (id) {
      if (isWorker) {
        importScripts(id);
      } else if (isNode) {
        nodeRequire(id);
      }
    }

    return NULL;
  }

  function pushInfo(moreInfo) {
    var files = moreInfo.f;
    var mToFiles = moreInfo.m;

    for (var id in mToFiles) {
      moduleToFiles[id] = mToFiles[id].map(function (f) {
        return publicPath + files[f];
      });
    }
  }

  function pushModules(moreModules) {
    for (var id in moreModules) {
      if (fnModules[id] === UNDEFINED) {
        fnModules[id] = moreModules[id];
      }
    }
  }

  function push(arg) {
    if (arg[1]) pushInfo(arg[1]);
    pushModules(arg[0]);
  }

  function exportHelper(e, name, get) {
    Object.defineProperty(e, name, {
      enumerable: true,
      get
    });
  }

  function exportAllHelper(e, o) {
    Object.keys(o).forEach(function (k) {
      if (k === \\"default\\" || k === \\"__esModule\\") return;
      Object.defineProperty(e, k, {
        configurable: true,
        enumerable: true,
        get: function () {
          return o[k];
        }
      });
    });
  }

  function exists(id) {
    return modules[id] || fnModules[id];
  }

  function load(id) {
    if (modules[id]) {
      return modules[id];
    }

    var fn = fnModules[id];
    fnModules[id] = NULL;

    if (fn) {
      var moduleExports = {};
      Object.defineProperty(moduleExports, \\"__esModule\\", {
        writable: true,
        value: true
      });
      modules[id] = moduleExports; // $e, $r, $i, $g, $a

      fn(moduleExports, requireSync, requireAsync, exportHelper, exportAllHelper, {});
      return moduleExports;
    }

    var err = new Error(\\"Cannot find module \\" + id);
    err.code = \\"MODULE_NOT_FOUND\\";
    throw err;
  }

  function requireSync(id) {
    if (!exists(id)) {
      (moduleToFiles[id] || []).forEach(importFileSync);
    }

    return load(id);
  }

  requireSync.r = function (id) {
    var e = requireSync(id);
    return e.__esModule === false ? e.default : e;
  };

  function requireAsync(id) {
    return Promise.all(exists(id) ? [] : (moduleToFiles[id] || []).map(importFileAsync)).then(function () {
      return load(id);
    });
  }

  function importFileSync(file) {
    if (fileImports[file] === UNDEFINED) {
      fileImports[file] = require(file);
    }

    return fileImports[file];
  }

  function importFileAsync(src) {
    if (fileImports[src] !== UNDEFINED) {
      return Promise.resolve(fileImports[src]);
    }

    if (fetches[src]) {
      return fetches[src];
    }

    var resolution = [UNDEFINED, UNDEFINED];
    var promise = new Promise(function (resolve, reject) {
      resolution[0] = function (e) {
        fetches[src] = UNDEFINED;
        resolve(fileImports[src] = e);
      };

      resolution[1] = function (err) {
        fetches[src] = UNDEFINED;
        reject(err);
      };
    });
    fetches[src] = promise;

    if (isBrowser) {
      var script = doc.createElement(\\"script\\");
      script.type = \\"text/javascript\\";
      script.charset = \\"utf-8\\";
      script.async = true;
      script.timeout = 120000;
      script.src = src;
      var timeout = setTimeout(onError, 120000);

      var done = function (err) {
        clearTimeout(timeout);
        script.onerror = script.onload = UNDEFINED; // Avoid memory leaks in IE

        resolution[err ? 1 : 0](err || NULL);
      };

      var onError = function () {
        done(new Error(\\"Fetching \\" + src + \\" failed\\"));
      };

      script.onload = function () {
        done();
      };

      script.onerror = onError;
      doc.head.appendChild(script);
    } else {
      Promise.resolve(src).then(require).then(resolution[0], resolution[1]);
    }

    return promise;
  }

  var me = global.__quase_builder__;

  if (me) {
    if (Array.isArray(me.q)) {
      for (var i = 0; i < me.q.length; i++) {
        push(me.q[i]);
      }

      me.r = requireSync;
      me.i = requireAsync;
      me.q = {
        push
      };
    }
  } else {
    me = global.__quase_builder__ = {
      r: requireSync,
      i: requireAsync,
      q: {
        push
      }
    };
  }

  return me.r;
})(typeof self !== \\"undefined\\" ? self : Function(\\"return this\\")(), typeof require !== \\"undefined\\" && require)('index.js');
//# sourceMappingURL=index.js.map",
  "atual/index.js.map": "{\\"version\\":3,\\"sources\\":[\\"../working/index.js\\",\\"../working/b.js\\"],\\"names\\":[],\\"mappings\\":\\";2BAAc;;iCCAC,E\\",\\"file\\":\\"index.js\\",\\"sourcesContent\\":[\\"import b from './b';\\",\\"export default 10;\\\\n\\"]}",
}
`;

exports[`watcher Fixture: watch-fixtures/watches-rename 2`] = `
"
--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.18 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/index.js
working/package.json

--------

File working/a.js was removed.

--------

Starting new build...

--------

Could not resolve ./a. See index.js:1:14

> 1 | import a from \\"./a\\";
  2 | 

Build failed.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/index.js
working/package.json

--------

File working/index.js was changed.

--------

Starting new build...

--------

Assets:

[entry] atual/index.js | 5.18 kB

Done building.

--------

Watching:

../../../package.json
../../package.json
../package.json
package.json
working/a
working/a.js
working/a/index
working/a/index.js
working/a/package.json
working/b
working/b.js
working/index.js
working/package.json
"
`;
