// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`actions: code 1`] = `
"/* eslint-disable */
const Q=require(\\"@quase/parser\\");


    class Tokenizer extends Q.Tokenizer{
      
      constructor(input){
        super(input);
        this.labels=[\\"\\",\\"ID\\",\\"NUM\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=3;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=3;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
id=2;$$state=4;
}
break;
case 3:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=3;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=3;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=3;
}else {
id=1;$$state=4;
}
break;
case 4:
{
$$loop=false;
}
break;
}}

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      ruleID(){
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
}}
      }
ruleNUM(){
        this.consume2(48/*'0'*/,57/*'9'*/);let $$state=2,$$loop=true;while($$loop){
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
$$loop=false;
}
}
      }
    }
class Parser extends Q.Parser{

    constructor(text){super(new Tokenizer(text));}
    unexpected(id) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
rulePROGRAM(){
        let $$loc=this.startNode();let $id=null;
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(this.current===1/*ID*/){
$id=this.consume1(1/*ID*/);$$state=2;
}else if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
case 2:
if(this.current===1/*ID*/||this.current===0/*EOF*/){
 console.log(\\"\\\\n\\",$id); if(true){} ;$$state=1;
}else {
throw this.unexpected();
}
break;
}}
        return {type:\\"PROGRAM\\",id:$id,loc:this.locNode($$loc)};
      }
parse(){
      const r=this.rulePROGRAM();this.consume1(0);return r;
    }}
module.exports=Parser;
"
`;

exports[`basic: ast 1`] = `
Object {
  "body": Object {
    "loc": Object {
      "end": Object {
        "column": 21,
        "line": 1,
        "pos": 21,
      },
      "start": Object {
        "column": 16,
        "line": 1,
        "pos": 16,
      },
    },
    "stuff": Object {
      "id": 8,
      "image": "10000",
      "label": "NUM",
    },
    "type": "EXP",
  },
  "loc": Object {
    "end": Object {
      "column": 25,
      "line": 1,
      "pos": 25,
    },
    "start": Object {
      "column": 0,
      "line": 1,
      "pos": 0,
    },
  },
  "params": Array [
    Object {
      "id": 7,
      "image": "id1",
      "label": "ID",
    },
    Object {
      "id": 7,
      "image": "id2",
      "label": "ID",
    },
  ],
  "type": "PROGRAM",
}
`;

exports[`basic: ast 2`] = `
Object {
  "body": Object {
    "loc": Object {
      "end": Object {
        "column": 14,
        "line": 1,
        "pos": 14,
      },
      "start": Object {
        "column": 11,
        "line": 1,
        "pos": 11,
      },
    },
    "stuff": Object {
      "id": 7,
      "image": "id1",
      "label": "ID",
    },
    "type": "EXP",
  },
  "loc": Object {
    "end": Object {
      "column": 18,
      "line": 1,
      "pos": 18,
    },
    "start": Object {
      "column": 0,
      "line": 1,
      "pos": 0,
    },
  },
  "params": Array [
    Object {
      "id": 7,
      "image": "id1",
      "label": "ID",
    },
  ],
  "type": "PROGRAM",
}
`;

exports[`basic: code 1`] = `
"/* eslint-disable */
const Q=require(\\"@quase/parser\\");


    class Tokenizer extends Q.Tokenizer{
      
      constructor(input){
        super(input);
        this.labels=[\\"\\",\\"FUN\\",\\"END\\",\\"COMMA\\",\\"ARROW\\",\\"ID_START\\",\\"ID_CHAR\\",\\"ID\\",\\"NUM\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(this.current===44/*','*/){
this.consume1(44/*','*/);$$state=3;
}else if(this.current===45/*'-'*/){
this.consume1(45/*'-'*/);$$state=4;
}else if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/||/*'a'*/97<=this.current&&this.current<=100/*'d'*/){
this.ruleID_START();$$state=2;
}else if(this.current===101/*'e'*/){
this.consume1(101/*'e'*/);$$state=7;
}else if(this.current===102/*'f'*/){
this.consume1(102/*'f'*/);$$state=10;
}else if(/*'g'*/103<=this.current&&this.current<=122/*'z'*/){
this.ruleID_START();$$state=2;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/||/*'A'*/65<=this.current&&this.current<=90/*'Z'*/||/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.ruleID_CHAR();$$state=2;
}else {
id=7;$$state=13;
}
break;
case 3:
{
id=3;$$state=13;
}
break;
case 4:
if(this.current===62/*'>'*/){
this.consume1(62/*'>'*/);$$state=5;
}else {
$$loop=false;
}
break;
case 5:
{
id=4;$$state=13;
}
break;
case 6:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else {
id=8;$$state=13;
}
break;
case 7:
if(this.current===110/*'n'*/){
this.consume1(110/*'n'*/);$$state=8;
}else {
$$loop=false;
}
break;
case 8:
if(this.current===100/*'d'*/){
this.consume1(100/*'d'*/);$$state=9;
}else {
$$loop=false;
}
break;
case 9:
{
id=2;$$state=13;
}
break;
case 10:
if(this.current===117/*'u'*/){
this.consume1(117/*'u'*/);$$state=11;
}else {
$$loop=false;
}
break;
case 11:
if(this.current===110/*'n'*/){
this.consume1(110/*'n'*/);$$state=12;
}else {
$$loop=false;
}
break;
case 12:
{
id=1;$$state=13;
}
break;
case 13:
{
$$loop=false;
}
break;
}}

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      ruleFUN(){
        this.consume1(102/*'f'*/);this.consume1(117/*'u'*/);this.consume1(110/*'n'*/);
      }
ruleEND(){
        this.consume1(101/*'e'*/);this.consume1(110/*'n'*/);this.consume1(100/*'d'*/);
      }
ruleCOMMA(){
        this.consume1(44/*','*/);
      }
ruleARROW(){
        this.consume1(45/*'-'*/);this.consume1(62/*'>'*/);
      }
ruleID_START(){
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 2:
{
$$loop=false;
}
break;
}}
      }
ruleID_CHAR(){
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 2:
{
$$loop=false;
}
break;
}}
      }
ruleID(){
        this.ruleID_START();let $$state=2,$$loop=true;while($$loop){
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/||/*'A'*/65<=this.current&&this.current<=90/*'Z'*/||/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.ruleID_CHAR();$$state=2;
}else {
$$loop=false;
}
}
      }
ruleNUM(){
        this.consume2(48/*'0'*/,57/*'9'*/);let $$state=2,$$loop=true;while($$loop){
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
$$loop=false;
}
}
      }
    }
class Parser extends Q.Parser{

    constructor(text){super(new Tokenizer(text));}
    unexpected(id) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
rulePROGRAM(){
        let $$loc=this.startNode();let $params=[],$body;
        this.consume1(1/*FUN*/);let $$state=2,$$loop=true;while($$loop){switch($$state){
case 2:
if(this.current===4/*ARROW*/){
this.consume1(4/*ARROW*/);$$state=5;
}else if(this.current===7/*ID*/){
$params.push(this.consume1(7/*ID*/));$$state=3;
}else {
throw this.unexpected();
}
break;
case 3:
if(this.current===3/*COMMA*/){
this.consume1(3/*COMMA*/);$$state=4;
}else if(this.current===4/*ARROW*/){
this.consume1(4/*ARROW*/);$$state=5;
}else {
throw this.unexpected();
}
break;
case 4:
if(this.current===7/*ID*/){
$params.push(this.consume1(7/*ID*/));$$state=3;
}else {
throw this.unexpected();
}
break;
case 5:
if(this.current===7/*ID*/||this.current===8/*NUM*/){
$body=this.ruleEXP();$$state=6;
}else {
throw this.unexpected();
}
break;
case 6:
if(this.current===2/*END*/){
this.consume1(2/*END*/);$$state=7;
}else {
throw this.unexpected();
}
break;
case 7:
if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
}}
        return {type:\\"PROGRAM\\",params:$params,body:$body,loc:this.locNode($$loc)};
      }
ruleEXP(){
        let $$loc=this.startNode();let $stuff;
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(this.current===7/*ID*/){
$stuff=this.consume1(7/*ID*/);$$state=2;
}else if(this.current===8/*NUM*/){
$stuff=this.consume1(8/*NUM*/);$$state=2;
}else {
throw this.unexpected();
}
break;
case 2:
if(this.current===2/*END*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
}}
        return {type:\\"EXP\\",stuff:$stuff,loc:this.locNode($$loc)};
      }
parse(){
      const r=this.rulePROGRAM();this.consume1(0);return r;
    }}
module.exports=Parser;
"
`;

exports[`basic: conflicts 1`] = `
Array [
  "In lexer, in state 1, when seeing [Range [101,101]], multiple choices: [Range [101,101]] to 7; [Rule ID_START] to 2",
  "In lexer, in state 1, when seeing [Range [102,102]], multiple choices: [Range [102,102]] to 10; [Rule ID_START] to 2",
]
`;

exports[`basic: error 1`] = `"Unexpected token EOF (at 1:14)"`;

exports[`dot - typescript: code 1`] = `
"/* eslint-disable */
import Q from \\"@quase/parser\\";
export type $1 = {id:1;label:\\"ID\\";image:string;};
export type $2 = {id:2;label:\\"NUM\\";image:string;};
export type $EOF = {id:0;label:\\"EOF\\";image:string };
export type $Tokens = $1|$2;
export type $TokensWithEOF = $EOF|$Tokens;
export type $Position = {pos:number;line:number;column:number;};
export type $Location = {start:$Position;end:$Position;};
export interface $Base<T> {type:T;loc:$Location;}
export interface PROGRAM extends $Base<'PROGRAM'> {tokens:($Tokens)[];};

    class Tokenizer extends Q.Tokenizer{
      labels:string[];
      constructor(input:string){
        super(input);
        this.labels=[\\"\\",\\"ID\\",\\"NUM\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=3;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=3;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
id=2;$$state=4;
}
break;
case 3:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=3;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=3;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=3;
}else {
id=1;$$state=4;
}
break;
case 4:
{
$$loop=false;
}
break;
}}

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      ruleID(){
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
}}
      }
ruleNUM(){
        this.consume2(48/*'0'*/,57/*'9'*/);let $$state=2,$$loop=true;while($$loop){
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
$$loop=false;
}
}
      }
    }
class Parser extends Q.Parser{

    constructor(text:string){super(new Tokenizer(text));}
    unexpected(id:number|string) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
rulePROGRAM(){
        let $$loc=this.startNode();let $tokens=[];
        let $$state=1,$$loop=true;while($$loop){
if(/*ID*/1<=this.current&&this.current<=2/*NUM*/){
$tokens.push(this.consume2(1/*ID*/,2/*NUM*/));$$state=1;
}else if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
}
        return {type:\\"PROGRAM\\",tokens:$tokens,loc:this.locNode($$loc)} as PROGRAM;
      }
parse(){
      const r=this.rulePROGRAM();this.consume1(0);return r;
    }}
export default Parser;
"
`;

exports[`dot: ast 1`] = `
Object {
  "loc": Object {
    "end": Object {
      "column": 15,
      "line": 1,
      "pos": 15,
    },
    "start": Object {
      "column": 0,
      "line": 1,
      "pos": 0,
    },
  },
  "tokens": Array [
    Object {
      "id": 1,
      "image": "id1",
      "label": "ID",
    },
    Object {
      "id": 2,
      "image": "100",
      "label": "NUM",
    },
    Object {
      "id": 1,
      "image": "id2",
      "label": "ID",
    },
    Object {
      "id": 2,
      "image": "200",
      "label": "NUM",
    },
  ],
  "type": "PROGRAM",
}
`;

exports[`dot: code 1`] = `
"/* eslint-disable */
const Q=require(\\"@quase/parser\\");


    class Tokenizer extends Q.Tokenizer{
      
      constructor(input){
        super(input);
        this.labels=[\\"\\",\\"ID\\",\\"NUM\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=3;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=3;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
id=2;$$state=4;
}
break;
case 3:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=3;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=3;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=3;
}else {
id=1;$$state=4;
}
break;
case 4:
{
$$loop=false;
}
break;
}}

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      ruleID(){
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
}}
      }
ruleNUM(){
        this.consume2(48/*'0'*/,57/*'9'*/);let $$state=2,$$loop=true;while($$loop){
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
$$loop=false;
}
}
      }
    }
class Parser extends Q.Parser{

    constructor(text){super(new Tokenizer(text));}
    unexpected(id) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
rulePROGRAM(){
        let $$loc=this.startNode();let $tokens=[];
        let $$state=1,$$loop=true;while($$loop){
if(/*ID*/1<=this.current&&this.current<=2/*NUM*/){
$tokens.push(this.consume2(1/*ID*/,2/*NUM*/));$$state=1;
}else if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
}
        return {type:\\"PROGRAM\\",tokens:$tokens,loc:this.locNode($$loc)};
      }
parse(){
      const r=this.rulePROGRAM();this.consume1(0);return r;
    }}
module.exports=Parser;
"
`;

exports[`negative character class in regexp: code 1`] = `
"/* eslint-disable */
const Q=require(\\"@quase/parser\\");


    class Tokenizer extends Q.Tokenizer{
      
      constructor(input){
        super(input);
        this.labels=[\\"\\",\\"STRING\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        this.consume1(34/*'\\"'*/);let $$state=2,$$loop=true;while($$loop){switch($$state){
case 2:
if(/*' '*/0<=this.current&&this.current<=33/*'!'*/){
this.consume2(0/*' '*/,33/*'!'*/);$$state=2;
}else if(this.current===34/*'\\"'*/){
this.consume1(34/*'\\"'*/);$$state=3;
}else if(/*'#'*/35<=this.current&&this.current<=91/*'['*/){
this.consume2(35/*'#'*/,91/*'['*/);$$state=2;
}else if(this.current===92/*'\\\\'*/){
this.consume1(92/*'\\\\'*/);$$state=4;
}else if(/*']'*/93<=this.current&&this.current<=1114111/*'􏿿'*/){
this.consume2(93/*']'*/,1114111/*'􏿿'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 3:
{
id=1;$$state=5;
}
break;
case 4:
if(/*' '*/0<=this.current&&this.current<=1114111/*'􏿿'*/){
this.consume2(0/*' '*/,1114111/*'􏿿'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 5:
{
$$loop=false;
}
break;
}}

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      ruleSTRING(){
        this.consume1(34/*'\\"'*/);let $$state=2,$$loop=true;while($$loop){switch($$state){
case 2:
if(/*' '*/0<=this.current&&this.current<=33/*'!'*/){
this.consume2(0/*' '*/,33/*'!'*/);$$state=2;
}else if(this.current===34/*'\\"'*/){
this.consume1(34/*'\\"'*/);$$state=4;
}else if(/*'#'*/35<=this.current&&this.current<=91/*'['*/){
this.consume2(35/*'#'*/,91/*'['*/);$$state=2;
}else if(this.current===92/*'\\\\'*/){
this.consume1(92/*'\\\\'*/);$$state=3;
}else if(/*']'*/93<=this.current&&this.current<=1114111/*'􏿿'*/){
this.consume2(93/*']'*/,1114111/*'􏿿'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 3:
if(/*' '*/0<=this.current&&this.current<=1114111/*'􏿿'*/){
this.consume2(0/*' '*/,1114111/*'􏿿'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 4:
{
$$loop=false;
}
break;
}}
      }
    }
class Parser extends Q.Parser{

    constructor(text){super(new Tokenizer(text));}
    unexpected(id) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
ruleRULE1(){
        let $$loc=this.startNode();
        this.consume1(1/*STRING*/);let $$state=2,$$loop=true;while($$loop){
if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
}
        return {type:\\"RULE1\\",loc:this.locNode($$loc)};
      }
parse(){
      const r=this.ruleRULE1();this.consume1(0);return r;
    }}
module.exports=Parser;
"
`;

exports[`negative character class in regexp: conflicts 1`] = `Array []`;

exports[`optimized repetitions and nested rule on right side: code 1`] = `
"/* eslint-disable */
const Q=require(\\"@quase/parser\\");


    class Tokenizer extends Q.Tokenizer{
      
      constructor(input){
        super(input);
        this.labels=[\\"\\",\\"'A'\\",\\"'B'\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(this.current===65/*'A'*/){
this.consume1(65/*'A'*/);$$state=2;
}else if(this.current===66/*'B'*/){
this.consume1(66/*'B'*/);$$state=3;
}else {
$$loop=false;
}
break;
case 2:
{
id=1;$$state=4;
}
break;
case 3:
{
id=2;$$state=4;
}
break;
case 4:
{
$$loop=false;
}
break;
}}

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      
    }
class Parser extends Q.Parser{

    constructor(text){super(new Tokenizer(text));}
    unexpected(id) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
ruleRULE1(){
        let $$loc=this.startNode();
        this.consume1(1/*'A'*/);let $$state=2,$$loop=true;while($$loop){switch($$state){
case 2:
if(this.current===1/*'A'*/){
this.consume1(1/*'A'*/);$$state=2;
}else if(this.current===2/*'B'*/){
this.ruleRULE2();$$state=3;
}else {
throw this.unexpected();
}
break;
case 3:
if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
}}
        return {type:\\"RULE1\\",loc:this.locNode($$loc)};
      }
ruleRULE2(){
        let $$loc=this.startNode();
        this.consume1(2/*'B'*/);this.consume1(2/*'B'*/);let $$state=3,$$loop=true;while($$loop){
if(this.current===2/*'B'*/){
this.consume1(2/*'B'*/);$$state=3;
}else if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
}
        return {type:\\"RULE2\\",loc:this.locNode($$loc)};
      }
parse(){
      const r=this.ruleRULE1();this.consume1(0);return r;
    }}
module.exports=Parser;
"
`;

exports[`optimized repetitions and nested rule on right side: conflicts 1`] = `Array []`;

exports[`supports empty: code 1`] = `
"/* eslint-disable */
const Q=require(\\"@quase/parser\\");


    class Tokenizer extends Q.Tokenizer{
      
      constructor(input){
        super(input);
        this.labels=[\\"\\",\\"'A'\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        this.consume1(65/*'A'*/);id=1;

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      
    }
class Parser extends Q.Parser{

    constructor(text){super(new Tokenizer(text));}
    unexpected(id) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
ruleRULE1(){
        let $$loc=this.startNode();
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(this.current===1/*'A'*/){
this.consume1(1/*'A'*/);$$state=2;
}else if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
case 2:
if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
}}
        return {type:\\"RULE1\\",loc:this.locNode($$loc)};
      }
parse(){
      const r=this.ruleRULE1();this.consume1(0);return r;
    }}
module.exports=Parser;
"
`;

exports[`supports empty: conflicts 1`] = `Array []`;

exports[`typescript: code 1`] = `
"/* eslint-disable */
import Q from \\"@quase/parser\\";
export type $1 = {id:1;label:\\"'fun'\\";image:string;};
export type $2 = {id:2;label:\\"','\\";image:string;};
export type $3 = {id:3;label:\\"'->'\\";image:string;};
export type $4 = {id:4;label:\\"'end'\\";image:string;};
export type $5 = {id:5;label:\\"ID\\";image:string;};
export type $6 = {id:6;label:\\"NUM\\";image:string;};
export type $EOF = {id:0;label:\\"EOF\\";image:string };
export type $Tokens = $1|$2|$3|$4|$5|$6;
export type $TokensWithEOF = $EOF|$Tokens;
export type $Position = {pos:number;line:number;column:number;};
export type $Location = {start:$Position;end:$Position;};
export interface $Base<T> {type:T;loc:$Location;}
export interface EXP extends $Base<'EXP'> {stuff:$6|$5;};
export interface PROGRAM extends $Base<'PROGRAM'> {params:($5)[];body:EXP;};

    class Tokenizer extends Q.Tokenizer{
      labels:string[];
      constructor(input:string){
        super(input);
        this.labels=[\\"\\",\\"'fun'\\",\\"','\\",\\"'->'\\",\\"'end'\\",\\"ID\\",\\"NUM\\"];
      }
      readToken() {
        const prevPos = this.pos;
        let id = -1;

        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(this.current===44/*','*/){
this.consume1(44/*','*/);$$state=2;
}else if(this.current===45/*'-'*/){
this.consume1(45/*'-'*/);$$state=3;
}else if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=5;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=100/*'d'*/){
this.consume2(97/*'a'*/,100/*'d'*/);$$state=6;
}else if(this.current===101/*'e'*/){
this.consume1(101/*'e'*/);$$state=7;
}else if(this.current===102/*'f'*/){
this.consume1(102/*'f'*/);$$state=10;
}else if(/*'g'*/103<=this.current&&this.current<=122/*'z'*/){
this.consume2(103/*'g'*/,122/*'z'*/);$$state=6;
}else {
$$loop=false;
}
break;
case 2:
{
id=2;$$state=13;
}
break;
case 3:
if(this.current===62/*'>'*/){
this.consume1(62/*'>'*/);$$state=4;
}else {
$$loop=false;
}
break;
case 4:
{
id=3;$$state=13;
}
break;
case 5:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=5;
}else {
id=6;$$state=13;
}
break;
case 6:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=6;
}else {
id=5;$$state=13;
}
break;
case 7:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=109/*'m'*/){
this.consume2(97/*'a'*/,109/*'m'*/);$$state=6;
}else if(this.current===110/*'n'*/){
this.consume1(110/*'n'*/);$$state=8;
}else if(/*'o'*/111<=this.current&&this.current<=122/*'z'*/){
this.consume2(111/*'o'*/,122/*'z'*/);$$state=6;
}else {
id=5;$$state=13;
}
break;
case 8:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=99/*'c'*/){
this.consume2(97/*'a'*/,99/*'c'*/);$$state=6;
}else if(this.current===100/*'d'*/){
this.consume1(100/*'d'*/);$$state=9;
}else if(/*'e'*/101<=this.current&&this.current<=122/*'z'*/){
this.consume2(101/*'e'*/,122/*'z'*/);$$state=6;
}else {
id=5;$$state=13;
}
break;
case 9:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=6;
}else {
id=4;$$state=13;
}
break;
case 10:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=116/*'t'*/){
this.consume2(97/*'a'*/,116/*'t'*/);$$state=6;
}else if(this.current===117/*'u'*/){
this.consume1(117/*'u'*/);$$state=11;
}else if(/*'v'*/118<=this.current&&this.current<=122/*'z'*/){
this.consume2(118/*'v'*/,122/*'z'*/);$$state=6;
}else {
id=5;$$state=13;
}
break;
case 11:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=109/*'m'*/){
this.consume2(97/*'a'*/,109/*'m'*/);$$state=6;
}else if(this.current===110/*'n'*/){
this.consume1(110/*'n'*/);$$state=12;
}else if(/*'o'*/111<=this.current&&this.current<=122/*'z'*/){
this.consume2(111/*'o'*/,122/*'z'*/);$$state=6;
}else {
id=5;$$state=13;
}
break;
case 12:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=6;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=6;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=6;
}else {
id=1;$$state=13;
}
break;
case 13:
{
$$loop=false;
}
break;
}}

        if (id===-1) {
          throw this.unexpected();
        }

        const image=this.input.slice(prevPos,this.pos);
        const splitted=image.split(/\\\\r\\\\n?|\\\\n/g);
        const newLines=splitted.length-1;
        if (newLines>0) {
          this._lineStart=this.pos-splitted[newLines].length;
          this._curLine+=newLines;
        }
        return {
          id,
          label: this.labels[id],
          image
        };
      }
      ruleID(){
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
case 2:
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else if(/*'A'*/65<=this.current&&this.current<=90/*'Z'*/){
this.consume2(65/*'A'*/,90/*'Z'*/);$$state=2;
}else if(/*'a'*/97<=this.current&&this.current<=122/*'z'*/){
this.consume2(97/*'a'*/,122/*'z'*/);$$state=2;
}else {
$$loop=false;
}
break;
}}
      }
ruleNUM(){
        this.consume2(48/*'0'*/,57/*'9'*/);let $$state=2,$$loop=true;while($$loop){
if(/*'0'*/48<=this.current&&this.current<=57/*'9'*/){
this.consume2(48/*'0'*/,57/*'9'*/);$$state=2;
}else {
$$loop=false;
}
}
      }
    }
class Parser extends Q.Parser{

    constructor(text:string){super(new Tokenizer(text));}
    unexpected(id:number|string) {
      const labels = this.tokenizer.labels;
      super.unexpected(labels[id]||id);
    }
    
rulePROGRAM(){
        let $$loc=this.startNode();let $params=[],$body;
        this.consume1(1/*'fun'*/);let $$state=2,$$loop=true;while($$loop){switch($$state){
case 2:
if(this.current===3/*'->'*/){
this.consume1(3/*'->'*/);$$state=5;
}else if(this.current===5/*ID*/){
$params.push(this.consume1(5/*ID*/));$$state=3;
}else {
throw this.unexpected();
}
break;
case 3:
if(this.current===2/*','*/){
this.consume1(2/*','*/);$$state=4;
}else if(this.current===3/*'->'*/){
this.consume1(3/*'->'*/);$$state=5;
}else {
throw this.unexpected();
}
break;
case 4:
if(this.current===5/*ID*/){
$params.push(this.consume1(5/*ID*/));$$state=3;
}else {
throw this.unexpected();
}
break;
case 5:
if(this.current===5/*ID*/||this.current===6/*NUM*/){
$body=this.ruleEXP();$$state=6;
}else {
throw this.unexpected();
}
break;
case 6:
if(this.current===4/*'end'*/){
this.consume1(4/*'end'*/);$$state=7;
}else {
throw this.unexpected();
}
break;
case 7:
if(this.current===0/*EOF*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
}}
        return {type:\\"PROGRAM\\",params:$params,body:$body,loc:this.locNode($$loc)} as PROGRAM;
      }
ruleEXP(){
        let $$loc=this.startNode();let $stuff;
        let $$state=1,$$loop=true;while($$loop){switch($$state){
case 1:
if(this.current===5/*ID*/){
$stuff=this.consume1(5/*ID*/);$$state=2;
}else if(this.current===6/*NUM*/){
$stuff=this.consume1(6/*NUM*/);$$state=2;
}else {
throw this.unexpected();
}
break;
case 2:
if(this.current===4/*'end'*/){
$$loop=false;
}else {
throw this.unexpected();
}
break;
}}
        return {type:\\"EXP\\",stuff:$stuff,loc:this.locNode($$loc)} as EXP;
      }
parse(){
      const r=this.rulePROGRAM();this.consume1(0);return r;
    }}
export default Parser;
"
`;
